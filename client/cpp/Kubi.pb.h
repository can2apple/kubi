// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Kubi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Kubi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Kubi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Kubi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Kubi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Kubi_2eproto;
namespace kubi {
class KNode;
struct KNodeDefaultTypeInternal;
extern KNodeDefaultTypeInternal _KNode_default_instance_;
}  // namespace kubi
PROTOBUF_NAMESPACE_OPEN
template<> ::kubi::KNode* Arena::CreateMaybeMessage<::kubi::KNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kubi {

// ===================================================================

class KNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kubi.KNode) */ {
 public:
  inline KNode() : KNode(nullptr) {}
  ~KNode() override;
  explicit PROTOBUF_CONSTEXPR KNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KNode(const KNode& from);
  KNode(KNode&& from) noexcept
    : KNode() {
    *this = ::std::move(from);
  }

  inline KNode& operator=(const KNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline KNode& operator=(KNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const KNode* internal_default_instance() {
    return reinterpret_cast<const KNode*>(
               &_KNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KNode& a, KNode& b) {
    a.Swap(&b);
  }
  inline void Swap(KNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KNode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kubi.KNode";
  }
  protected:
  explicit KNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 3,
    kRouteFieldNumber = 4,
    kDataStrFieldNumber = 5,
    kDataBytesFieldNumber = 6,
    kPkgTypeFieldNumber = 1,
    kPkgIdFieldNumber = 2,
  };
  // string uid = 3;
  void clear_uid();
  const std::string& uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uid();
  PROTOBUF_NODISCARD std::string* release_uid();
  void set_allocated_uid(std::string* uid);
  private:
  const std::string& _internal_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uid(const std::string& value);
  std::string* _internal_mutable_uid();
  public:

  // string route = 4;
  void clear_route();
  const std::string& route() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_route(ArgT0&& arg0, ArgT... args);
  std::string* mutable_route();
  PROTOBUF_NODISCARD std::string* release_route();
  void set_allocated_route(std::string* route);
  private:
  const std::string& _internal_route() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route(const std::string& value);
  std::string* _internal_mutable_route();
  public:

  // string data_str = 5;
  void clear_data_str();
  const std::string& data_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_str();
  PROTOBUF_NODISCARD std::string* release_data_str();
  void set_allocated_data_str(std::string* data_str);
  private:
  const std::string& _internal_data_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_str(const std::string& value);
  std::string* _internal_mutable_data_str();
  public:

  // bytes data_bytes = 6;
  void clear_data_bytes();
  const std::string& data_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data_bytes();
  PROTOBUF_NODISCARD std::string* release_data_bytes();
  void set_allocated_data_bytes(std::string* data_bytes);
  private:
  const std::string& _internal_data_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data_bytes(const std::string& value);
  std::string* _internal_mutable_data_bytes();
  public:

  // int32 pkg_type = 1;
  void clear_pkg_type();
  int32_t pkg_type() const;
  void set_pkg_type(int32_t value);
  private:
  int32_t _internal_pkg_type() const;
  void _internal_set_pkg_type(int32_t value);
  public:

  // int32 pkg_id = 2;
  void clear_pkg_id();
  int32_t pkg_id() const;
  void set_pkg_id(int32_t value);
  private:
  int32_t _internal_pkg_id() const;
  void _internal_set_pkg_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:kubi.KNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_bytes_;
  int32_t pkg_type_;
  int32_t pkg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Kubi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KNode

// int32 pkg_type = 1;
inline void KNode::clear_pkg_type() {
  pkg_type_ = 0;
}
inline int32_t KNode::_internal_pkg_type() const {
  return pkg_type_;
}
inline int32_t KNode::pkg_type() const {
  // @@protoc_insertion_point(field_get:kubi.KNode.pkg_type)
  return _internal_pkg_type();
}
inline void KNode::_internal_set_pkg_type(int32_t value) {
  
  pkg_type_ = value;
}
inline void KNode::set_pkg_type(int32_t value) {
  _internal_set_pkg_type(value);
  // @@protoc_insertion_point(field_set:kubi.KNode.pkg_type)
}

// int32 pkg_id = 2;
inline void KNode::clear_pkg_id() {
  pkg_id_ = 0;
}
inline int32_t KNode::_internal_pkg_id() const {
  return pkg_id_;
}
inline int32_t KNode::pkg_id() const {
  // @@protoc_insertion_point(field_get:kubi.KNode.pkg_id)
  return _internal_pkg_id();
}
inline void KNode::_internal_set_pkg_id(int32_t value) {
  
  pkg_id_ = value;
}
inline void KNode::set_pkg_id(int32_t value) {
  _internal_set_pkg_id(value);
  // @@protoc_insertion_point(field_set:kubi.KNode.pkg_id)
}

// string uid = 3;
inline void KNode::clear_uid() {
  uid_.ClearToEmpty();
}
inline const std::string& KNode::uid() const {
  // @@protoc_insertion_point(field_get:kubi.KNode.uid)
  return _internal_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KNode::set_uid(ArgT0&& arg0, ArgT... args) {
 
 uid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kubi.KNode.uid)
}
inline std::string* KNode::mutable_uid() {
  std::string* _s = _internal_mutable_uid();
  // @@protoc_insertion_point(field_mutable:kubi.KNode.uid)
  return _s;
}
inline const std::string& KNode::_internal_uid() const {
  return uid_.Get();
}
inline void KNode::_internal_set_uid(const std::string& value) {
  
  uid_.Set(value, GetArenaForAllocation());
}
inline std::string* KNode::_internal_mutable_uid() {
  
  return uid_.Mutable(GetArenaForAllocation());
}
inline std::string* KNode::release_uid() {
  // @@protoc_insertion_point(field_release:kubi.KNode.uid)
  return uid_.Release();
}
inline void KNode::set_allocated_uid(std::string* uid) {
  if (uid != nullptr) {
    
  } else {
    
  }
  uid_.SetAllocated(uid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uid_.IsDefault()) {
    uid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kubi.KNode.uid)
}

// string route = 4;
inline void KNode::clear_route() {
  route_.ClearToEmpty();
}
inline const std::string& KNode::route() const {
  // @@protoc_insertion_point(field_get:kubi.KNode.route)
  return _internal_route();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KNode::set_route(ArgT0&& arg0, ArgT... args) {
 
 route_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kubi.KNode.route)
}
inline std::string* KNode::mutable_route() {
  std::string* _s = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:kubi.KNode.route)
  return _s;
}
inline const std::string& KNode::_internal_route() const {
  return route_.Get();
}
inline void KNode::_internal_set_route(const std::string& value) {
  
  route_.Set(value, GetArenaForAllocation());
}
inline std::string* KNode::_internal_mutable_route() {
  
  return route_.Mutable(GetArenaForAllocation());
}
inline std::string* KNode::release_route() {
  // @@protoc_insertion_point(field_release:kubi.KNode.route)
  return route_.Release();
}
inline void KNode::set_allocated_route(std::string* route) {
  if (route != nullptr) {
    
  } else {
    
  }
  route_.SetAllocated(route, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (route_.IsDefault()) {
    route_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kubi.KNode.route)
}

// string data_str = 5;
inline void KNode::clear_data_str() {
  data_str_.ClearToEmpty();
}
inline const std::string& KNode::data_str() const {
  // @@protoc_insertion_point(field_get:kubi.KNode.data_str)
  return _internal_data_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KNode::set_data_str(ArgT0&& arg0, ArgT... args) {
 
 data_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kubi.KNode.data_str)
}
inline std::string* KNode::mutable_data_str() {
  std::string* _s = _internal_mutable_data_str();
  // @@protoc_insertion_point(field_mutable:kubi.KNode.data_str)
  return _s;
}
inline const std::string& KNode::_internal_data_str() const {
  return data_str_.Get();
}
inline void KNode::_internal_set_data_str(const std::string& value) {
  
  data_str_.Set(value, GetArenaForAllocation());
}
inline std::string* KNode::_internal_mutable_data_str() {
  
  return data_str_.Mutable(GetArenaForAllocation());
}
inline std::string* KNode::release_data_str() {
  // @@protoc_insertion_point(field_release:kubi.KNode.data_str)
  return data_str_.Release();
}
inline void KNode::set_allocated_data_str(std::string* data_str) {
  if (data_str != nullptr) {
    
  } else {
    
  }
  data_str_.SetAllocated(data_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_str_.IsDefault()) {
    data_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kubi.KNode.data_str)
}

// bytes data_bytes = 6;
inline void KNode::clear_data_bytes() {
  data_bytes_.ClearToEmpty();
}
inline const std::string& KNode::data_bytes() const {
  // @@protoc_insertion_point(field_get:kubi.KNode.data_bytes)
  return _internal_data_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KNode::set_data_bytes(ArgT0&& arg0, ArgT... args) {
 
 data_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kubi.KNode.data_bytes)
}
inline std::string* KNode::mutable_data_bytes() {
  std::string* _s = _internal_mutable_data_bytes();
  // @@protoc_insertion_point(field_mutable:kubi.KNode.data_bytes)
  return _s;
}
inline const std::string& KNode::_internal_data_bytes() const {
  return data_bytes_.Get();
}
inline void KNode::_internal_set_data_bytes(const std::string& value) {
  
  data_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* KNode::_internal_mutable_data_bytes() {
  
  return data_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* KNode::release_data_bytes() {
  // @@protoc_insertion_point(field_release:kubi.KNode.data_bytes)
  return data_bytes_.Release();
}
inline void KNode::set_allocated_data_bytes(std::string* data_bytes) {
  if (data_bytes != nullptr) {
    
  } else {
    
  }
  data_bytes_.SetAllocated(data_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_bytes_.IsDefault()) {
    data_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kubi.KNode.data_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace kubi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Kubi_2eproto
